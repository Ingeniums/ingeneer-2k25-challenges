

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_40229 = Integer(40229); _sage_const_30387 = Integer(30387); _sage_const_27 = Integer(27); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_30 = Integer(30)
from Crypto.Util.number import *
from sage.all import *

with open("output.txt", "r") as f:
    lines = f.readlines()
    n = int(lines[_sage_const_0 ].split('=')[_sage_const_1 ].strip())
    c1 = int(lines[_sage_const_1 ].split('=')[_sage_const_1 ].strip())
    c2 = int(lines[_sage_const_2 ].split('=')[_sage_const_1 ].strip())

def egcd(a, b):
    if (a == _sage_const_0 ):return (b, _sage_const_0 , _sage_const_1 )
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)
e1, e2 = _sage_const_40229 , _sage_const_30387 

d , a , b =egcd(e1,e2)

i = inverse(c2,n)

mx = pow(c1,a,n)
my = pow(i,-b,n)

m7 = mx*my % n
print(m7)
P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
b = bytes_to_long(b'1ng3neer2k25{')

l = _sage_const_27 *_sage_const_8 

print(b)
a = pow(_sage_const_2 ,l)*b 

print(a)
f = (a+x)**_sage_const_7  - m7


print(long_to_bytes(a+int(f.small_roots(epsilon=_sage_const_1 /_sage_const_30 )[_sage_const_0 ])))





